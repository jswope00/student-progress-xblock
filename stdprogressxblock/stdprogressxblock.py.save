"""TO-DO: Write a description of what this XBlock is."""

import datetime
import pkg_resources
import logging
import json
import pytz

import pkg_resources
from courseware.models import StudentModule

from student.models import CourseEnrollment, anonymous_id_for_user

from submissions import api as submissions_api
from submissions.models import StudentItem as SubmissionsStudent

from django.core.exceptions import PermissionDenied
from django.template import Context, Template

#from webob.response import Response
from django.db import connection 
from pymongo import Connection
from xblock.core import XBlock
from xblock.exceptions import JsonHandlerError
from xblock.fields import Scope, Integer, String
from xblock.fragment import Fragment
log = logging.getLogger(__name__)

class StdProgXBlock(XBlock):
    """
    TO-DO: document what your XBlock does.
    """
    server="localhost"
    port = 27017
        #Establish a connection with mongo instance.
    conn = Connection(server,port)
        #mongo1 = pymongo.Connection('127.0.0.1')
    #print "In MainFunction", conn.edxapp.modulestore.find({'$or': [{'_id.category': 'video'},{'_id.category':'stdprogressxblock'}]}).count()
    data_of_std = StudentModule.objects.all()
    display_name = String(
        display_name="Display name",
        default="Student Progress ",
        help="This name appears in the horizontal navigation at the top of "
             "the page.",
        scope=Scope.settings,
    )
    # Fields are defined on the class.  You can access them in your code as
    # self.<fieldname>.

    # TO-DO: delete count, and define your own fields.
    count = Integer(
        default=0, scope=Scope.user_state,
        help="A simple counter, to show something happening",
    )
    course_progress = Integer(
        display_name="Course Progress",
        help=("Show the percentage of Course"),
        default=0,
        scope=Scope.settings
        )
    data = String(
        display_name="Raw Data",
        help="For Raw data",
        default="Raw Data",
        scope=Scope.user_state_summary,
    )

    def resource_string(self, path):
        """Handy helper for getting resources from our kit."""
        data = pkg_resources.resource_string(__name__, path)
        return data.decode("utf8")

    # TO-DO: change this view to display your data your own way.
    def student_view(self, context=None):
        """
        The primary view of the StdProgXBlock, shown to students
        when viewing courses.
        """
        html = self.resource_string("static/html/stdprogressxblock.html")
        frag = Fragment(html.format(self=self))
        frag.add_css(self.resource_string("static/css/stdprogressxblock.css"))
        frag.add_javascript(self.resource_string("static/js/src/stdprogressxblock.js"))
        frag.initialize_js('StdProgXBlock')
        return frag

    # TO-DO: change this handler to perform your own actions.  You may need more
    # than one handler, or you may not need any handlers at all.
    @XBlock.json_handler
    def increment_count(self, data, suffix=''):
        """
        An example handler, which increments the data.
        """
        # Just to show data coming in...
#	assert data['hello'] == 'world'
        server="localhost"
        port = 27017
        #Establish a connection with mongo instance.
        conn = Connection(server,port)
        courseid_and_org = str(self.xmodule_runtime.course_id)
        courseid_and_org = courseid_and_org.split('/')
        org = courseid_and_org[0]
        course_id = courseid_and_org[1]
        #mongo1 = pymongo.Connection('127.0.0.1')
        self.count = \
         conn.edxapp.modulestore.find({"$and":[{'_id.org':org},{'_id.course': course_id},{'_id.category':{"$nin":['chapter','sequential','course']}}]}).count()
        print org," course id: ",course_id

        print "count is:", self.count
        self.data = str(self.count) + "\n"
        print "user_id:",self.scope_ids.user_id
        self.data = self.data + str(self.scope_ids) + "\n"
        course_progress = StudentModule.objects.filter(module_type="problem",student_id=self.scope_ids.user_id,state__isnull=False,course_id__contains=course_id)[:3]
        course_progress_problemcount = \
            StudentModule.objects.filter(module_type="problem",student_id=self.scope_ids.user_id,state__isnull=False,course_id__contains=course_id).count()
        print "Course Completed",course_progress
        self.data = self.data + str(course_progress) + "\n"

        print "Problem Count i:", course_progress_problemcount
        self.data = self.data + str(course_progress_problemcount) + "\n"

        modules_list = []
        course_problen_done = StudentModule.objects.get(pk=178)
        print "Problem Data", course_problen_done.state
        self.data = self.data + str(course_problen_done.state) + "\n"
 
        self.data = self.data + str(course_problen_done.state.done) + "\n"

#        url = os.environ["REQUEST_URI"] 
#    	    parsed = urlparse.urlparse(url) 
#        print urlparse.parse_qs(parsed.query)['param']
        
        return {"count": self.count,"data": self.data}

    # TO-DO: change this to create the scenarios you'd like to see in the
    # workbench while developing your XBlock.
    @staticmethod
    def workbench_scenarios():
        """A canned scenario for display in the workbench."""
        return [
            ("StdProgXBlock",
             """<vertical_demo>
                <stdprogressxblock/>
                <stdprogressxblock/>
                <stdprogressxblock/>
                </vertical_demo>
             """),
        ]
